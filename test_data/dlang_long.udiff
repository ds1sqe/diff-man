diff --git a/ref.md b/ref.md
index 141661b..ca03ae1 100644
--- a/ref.md
+++ b/ref.md
@@ -31,7 +31,7 @@
 
 
       Prefix_Expression = Prefix_Operator Expression
-        ex) 1 + 2, a - b, big >= small, ... 
+        ex) -100, !true, !false
 
       
       Call_Expression = Identifier ( Expression* ) | Function_Literal ( Expression* ) 
diff --git a/src/bytecode_vm/vm.rs b/src/bytecode_vm/vm.rs
index 232dc6b..9feef8d 100644
--- a/src/bytecode_vm/vm.rs
+++ b/src/bytecode_vm/vm.rs
@@ -5,8 +5,8 @@ use self::{errors::VmError, frame::Frame};
 use super::bytecode::{instruction::Instruction, Bytecode};
 use crate::{
     object::{
-        Array, Bool, ClosureFunction, CompiledFunction, Int, Object,
-        ObjectTrait, ObjectType, StringObject,
+        Array, Bool, ClosureFunction, CompiledFunction, Int, Object, ObjectTrait, ObjectType,
+        StringObject,
     },
     utils::add_pad,
 };
@@ -104,10 +104,7 @@ impl VM {
                     }
                     Instruction::GETFREE { idx } => {
                         // get local variable
-                        self.push_stack(
-                            self.current_frame().get_closure_ref().free[idx]
-                                .clone(),
-                        );
+                        self.push_stack(self.current_frame().get_closure_ref().free[idx].clone());
                     }
                     Instruction::GETCUR => {
                         // push current function to stack
@@ -152,27 +149,13 @@ impl VM {
                                     | Instruction::BAND
                                     | Instruction::BOR => {
                                         let value = match &instruction {
-                                            Instruction::ADD => {
-                                                left.value + right.value
-                                            }
-                                            Instruction::SUB => {
-                                                left.value - right.value
-                                            }
-                                            Instruction::PRODUCT => {
-                                                left.value * right.value
-                                            }
-                                            Instruction::DIVIDE => {
-                                                left.value / right.value
-                                            }
-                                            Instruction::MOD => {
-                                                left.value % right.value
-                                            }
-                                            Instruction::BAND => {
-                                                left.value & right.value
-                                            }
-                                            Instruction::BOR => {
-                                                left.value | right.value
-                                            }
+                                            Instruction::ADD => left.value + right.value,
+                                            Instruction::SUB => left.value - right.value,
+                                            Instruction::PRODUCT => left.value * right.value,
+                                            Instruction::DIVIDE => left.value / right.value,
+                                            Instruction::MOD => left.value % right.value,
+                                            Instruction::BAND => left.value & right.value,
+                                            Instruction::BOR => left.value | right.value,
                                             _unreachable => {
                                                 unreachable!()
                                             }
@@ -187,24 +170,12 @@ impl VM {
                                     | Instruction::CEQ
                                     | Instruction::CNEQ => {
                                         let value = match &instruction {
-                                            Instruction::CGT => {
-                                                left.value > right.value
-                                            }
-                                            Instruction::CGTE => {
-                                                left.value >= right.value
-                                            }
-                                            Instruction::CLT => {
-                                                left.value < right.value
-                                            }
-                                            Instruction::CLTE => {
-                                                left.value <= right.value
-                                            }
-                                            Instruction::CEQ => {
-                                                left.value == right.value
-                                            }
-                                            Instruction::CNEQ => {
-                                                left.value != right.value
-                                            }
+                                            Instruction::CGT => left.value > right.value,
+                                            Instruction::CGTE => left.value >= right.value,
+                                            Instruction::CLT => left.value < right.value,
+                                            Instruction::CLTE => left.value <= right.value,
+                                            Instruction::CEQ => left.value == right.value,
+                                            Instruction::CNEQ => left.value != right.value,
                                             _unreachable => {
                                                 unreachable!()
                                             }
@@ -213,11 +184,7 @@ impl VM {
                                         self.push_stack(rst);
                                     }
                                     invalid => {
-                                        return Err(
-                                            VmError::InvalidIntegerInstruction(
-                                                invalid,
-                                            ),
-                                        );
+                                        return Err(VmError::InvalidIntegerInstruction(invalid));
                                     }
                                 }
                             } else if left.get_type() == ObjectType::Bool {
@@ -228,24 +195,14 @@ impl VM {
                                     unreachable!()
                                 };
                                 let value = match instruction {
-                                    Instruction::AND => {
-                                        left.value && right.value
-                                    }
-                                    Instruction::OR => {
-                                        left.value || right.value
-                                    }
-                                    Instruction::CEQ => {
-                                        left.value == right.value
-                                    }
-                                    Instruction::CNEQ => {
-                                        left.value != right.value
-                                    }
+                                    Instruction::AND => left.value && right.value,
+                                    Instruction::OR => left.value || right.value,
+                                    Instruction::CEQ => left.value == right.value,
+                                    Instruction::CNEQ => left.value != right.value,
                                     invaild_instruction => {
-                                        return Err(
-                                            VmError::InvalidBoolInstruction(
-                                                invaild_instruction,
-                                            ),
-                                        );
+                                        return Err(VmError::InvalidBoolInstruction(
+                                            invaild_instruction,
+                                        ));
                                     }
                                 };
                                 let rst = Object::Bool(Bool { value });
@@ -260,11 +217,9 @@ impl VM {
 
                                 match instruction {
                                     Instruction::ADD => {
-                                        let rst =
-                                            Object::String(StringObject {
-                                                value: left.value
-                                                    + &right.value,
-                                            });
+                                        let rst = Object::String(StringObject {
+                                            value: left.value + &right.value,
+                                        });
                                         self.push_stack(rst);
                                     }
                                     Instruction::CEQ => {
@@ -280,11 +235,7 @@ impl VM {
                                         self.push_stack(rst);
                                     }
                                     invalid => {
-                                        return Err(
-                                            VmError::InvalidStringInstruction(
-                                                invalid,
-                                            ),
-                                        );
+                                        return Err(VmError::InvalidStringInstruction(invalid));
                                     }
                                 }
                             }
@@ -333,9 +284,7 @@ impl VM {
                                 return Ok(());
                             }
                         } else {
-                            return Err(VmError::JumpConditionNotABolean {
-                                obj: sign,
-                            });
+                            return Err(VmError::JumpConditionNotABolean { obj: sign });
                         }
                     }
                     Instruction::JNS { idx } => {
@@ -349,9 +298,7 @@ impl VM {
                                 return Ok(());
                             }
                         } else {
-                            return Err(VmError::JumpConditionNotABolean {
-                                obj: sign,
-                            });
+                            return Err(VmError::JumpConditionNotABolean { obj: sign });
                         }
                     }
 
@@ -366,11 +313,7 @@ impl VM {
                         let mut elements = Vec::with_capacity(count);
 
                         for offset in (1..=count).rev() {
-                            elements.push(
-                                self.stack[self.sp + 1 - offset]
-                                    .clone()
-                                    .unwrap(),
-                            )
+                            elements.push(self.stack[self.sp + 1 - offset].clone().unwrap())
                         }
                         self.sp -= count;
 
@@ -391,13 +334,9 @@ impl VM {
                                 let Object::Array(arr) = tgt else {
                                     unreachable!()
                                 };
-                                self.push_stack(
-                                    arr.elements[int.value as usize].clone(),
-                                );
+                                self.push_stack(arr.elements[int.value as usize].clone());
                             } else {
-                                return Err(VmError::IndexTargetNotAArray {
-                                    obj: tgt,
-                                });
+                                return Err(VmError::IndexTargetNotAArray { obj: tgt });
                             }
                         } else {
                             return Err(VmError::IndexNotAInt { obj: idx });
@@ -407,16 +346,19 @@ impl VM {
                         self.current_frame_mut()
                             .add_ic(instruction.opcode().length());
                         self.call(arg_len);
+                        return Ok(());
                     }
                     Instruction::RETN => {
                         let popped_frame = self.pop_frame();
                         self.sp = &popped_frame.bp() - 1;
+                        return Ok(());
                     }
                     Instruction::RETV => {
                         let value = self.pop_stack().unwrap();
                         let popped_frame = self.pop_frame();
                         self.sp = &popped_frame.bp() - 1;
                         self.push_stack(value);
+                        return Ok(());
                     }
                     Instruction::CLOSURE { idx, free } => {
                         self.make_closure(idx, free);
diff --git a/tests/vm.rs b/tests/vm.rs
index 90d5af1..30044cb 100644
--- a/tests/vm.rs
+++ b/tests/vm.rs
@@ -16,7 +16,9 @@ fn run_vm_test(tests: Tests<Option<Object>>) {
         let program = Parser::new(lexer).parse().unwrap();
 
         let mut comp = Compiler::create().unwrap();
-        comp.compile(program);
+        if let Err(e) = comp.compile(program) {
+            panic!("Compile error {:?}", e);
+        }
         let bytecode = comp.bytecode().unwrap();
 
         println!("Bytecode\n{}", bytecode.to_string());
@@ -25,7 +27,7 @@ fn run_vm_test(tests: Tests<Option<Object>>) {
 
         while vm.is_runable() {
             if let Err(err) = vm.run_single() {
-                eprintln!("Error {:?}", err);
+                panic!("VmError {:?}", err)
             }
         }
         println!("VM STACK:\n {}", vm.stack_to_string());
@@ -262,8 +264,7 @@ let no_return = fn() { };no_return() no_return() no_return() no_return()
 
     tests.add((
         "
-let fun = fn() { 10 + 20 };
-fun()
+let fun = fn() { 10 + 20 }; fun()
 ",
         Some(Object::Int(Int { value: 30 })),
     ));
